//  Copyright (c) Deighton Systems Limited. 2025. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


///////////////////////////////////////////
// Stages
stage AnalysisStage
{
    source .manifest;
    file AnalysisFile;

    global accessor array< ref< Service::Interface > >;
}

///////////////////////////////////////////
// Objects
namespace Service
{
    object Type -> AnalysisStage::AnalysisFile
    {
        // name is fully qualified i.e. absolute namespace
        value< std::string > name;
    }

    object QualifiedType : Type -> AnalysisStage::AnalysisFile
    {
        value< bool > is_const;
        value< bool > is_pointer;
        value< bool > is_reference;
        value< bool > is_rvalue;
    }

    object Parameter -> AnalysisStage::AnalysisFile
    {
        ref< QualifiedType > qualified_type;
        value< std::string > name;
    }

    object Function -> AnalysisStage::AnalysisFile
    {
        value< std::string > name;
        array< ref< Parameter > > parameters;
        ref< QualifiedType > return_type;
    }

    object Interface -> AnalysisStage::AnalysisFile
    {
        value< std::string > include_path;
        value< std::string > type_name;
        value< std::string > full_type_name;
        array< value< std::string > > namespaces;
        array< ref< Function > > functions;
    }

    object Factory : Interface -> AnalysisStage::AnalysisFile
    {
        
    }

    object Daemon : Interface -> AnalysisStage::AnalysisFile
    {
        
    }

}

