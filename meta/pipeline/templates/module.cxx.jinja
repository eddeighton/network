
// note pybind11 includes python.h and must be first include in file. 
#include <pybind11/pybind11.h>

{% for include in includes %}
#include "{{ include }}"
{% endfor %}

#include "test/test_factory.hpp"

#include "service/connect.hpp"
#include "service/ptr.hpp"
#include "vocab/service/mp.hpp"

#include <pybind11/operators.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>

#include <boost/archive/xml_oarchive.hpp>

#include <string>
#include <memory>
#include <sstream>

using namespace std::string_literals;

namespace mega::service
{
    class PythonConnection
    {
    public:
        std::unique_ptr< mega::service::Connect > m_pPythonConnection;
        std::unique_ptr< mega::test::OTestFactory > m_pTestFactory;

        PythonConnection( std::string strIPAddress = "localhost"s,
                short portNumber = 1234 )
            :   m_pPythonConnection( std::make_unique< mega::service::Connect >(
                    mega::service::IPAddress{ strIPAddress },
                    mega::service::PortNumber{ portNumber } ) )
            ,   m_pTestFactory( std::make_unique< mega::test::OTestFactory >( *m_pPythonConnection.get() ))
        {
        }

        static PythonConnection createDefault() { return PythonConnection(); }

        MP getMP() const
        {
            return m_pPythonConnection->getMP();
        }

        MP getDaemonMP() const
        {
            return m_pPythonConnection->getDaemonMP();
        }

        std::string printRegistration()
        {
            std::ostringstream os;
            os << m_pPythonConnection->readRegistry()->getRegistration();
            return os.str();
        }

        template< typename T >
        Ptr< T > get( MP mp )
        {
            return m_pPythonConnection->readRegistry()->one< T >( mp );
        }
    };
}

// namespace PYBIND11_NAMESPACE { namespace detail {
//     template <> struct type_caster<mega::controller::KeyboardEvent> {
//     public:
//         /**
//          * This macro establishes the name 'mega::controller::KeyboardEvent' in
//          * function signatures and declares a local variable
//          * 'value' of type mega::controller::KeyboardEvent
//          */
//         PYBIND11_TYPE_CASTER(mega::controller::KeyboardEvent, const_name("mega::controller::KeyboardEvent"));
// 
//         /**
//          * Conversion part 1 (Python->C++): convert a PyObject into a mega::controller::KeyboardEvent
//          * instance or return false upon failure. The second argument
//          * indicates whether implicit conversions should be applied.
//          */
//         bool load(handle src, bool) {
//             /* Extract PyObject from handle */
//             PyObject *source = src.ptr();
//             /* Try converting into a Python integer value */
//             PyObject *tmp = PyNumber_Long(source);
//             if (!tmp)
//                 return false;
//             /* Now try to convert into a C++ int */
//             value.long_value = PyLong_AsLong(tmp);
//             Py_DECREF(tmp);
//             /* Ensure return code was OK (to avoid out-of-range errors etc) */
//             return !(value.long_value == -1 && !PyErr_Occurred());
//         }
// 
//         /**
//          * Conversion part 2 (C++ -> Python): convert an mega::controller::KeyboardEvent instance into
//          * a Python object. The second and third arguments are used to
//          * indicate the return value policy and parent object (for
//          * ``return_value_policy::reference_internal``) and are generally
//          * ignored by implicit casters.
//          */
//         static handle cast(mega::controller::KeyboardEvent src, return_value_policy /* policy */, handle /* parent */) {
//             return PyLong_FromLong(src.long_value);
//         }
//     };
// }} // namespace PYBIND11_NAMESPACE::detail

PYBIND11_MODULE( megastructure, pythonModule )
{
    pythonModule.doc() = "Python Module for Megastructure";

    pybind11::class_< mega::controller::KeyboardEvent >( pythonModule, "KeyEvent" )
        .def( pybind11::init< std::string, bool >())
        .def( "Key", [](const mega::controller::KeyboardEvent& ke ) { return ke.key; } )
        .def( "Down", [](const mega::controller::KeyboardEvent& ke ) { return ke.down; } )
        .def( "__repr__", [](const mega::controller::KeyboardEvent& ke) { std::ostringstream os; os << ke; return os.str(); })
        .def( "__str__", [](const mega::controller::KeyboardEvent& ke) { std::ostringstream os; os << ke; return os.str(); })
        .def( pybind11::self < pybind11::self )
        .def( pybind11::self == pybind11::self )
        ;

    pybind11::class_< mega::service::MP >( pythonModule, "MP" )
        .def
        ( 
            pybind11::init
            ( 
                [](int m, int p) -> mega::service::MP
                {
                    using namespace mega::service;
                    return MP
                    (
                        MachineID(static_cast<MachineID::ValueType>(m)),
                        ProcessID(static_cast<ProcessID::ValueType>(p))
                    );
                }
            ) 
        )
        .def( "MachineID", [](const mega::service::MP& mp) { return mp.getMachineID().getValue(); } )
        .def( "ProcessID", [](const mega::service::MP& mp) { return mp.getProcessID().getValue(); } )
        .def( "__repr__", [](const mega::service::MP& mp) { std::ostringstream os; os << mp; return os.str(); })
        .def( "__str__", [](const mega::service::MP& mp) { std::ostringstream os; os << mp; return os.str(); })
        ;

    pybind11::class_< mega::service::MPTFO >( pythonModule, "MPTFO" )
        .def( "MachineID", [](const mega::service::MPTFO& mp) { return mp.getMachineID().getValue(); } )
        .def( "ProcessID", [](const mega::service::MPTFO& mp) { return mp.getProcessID().getValue(); } )
        .def( "mp", &mega::service::MPTFO::getMP )
        .def( "__repr__", [](const mega::service::MPTFO& mp) { std::ostringstream os; os << mp; return os.str(); })
        .def( "__str__", [](const mega::service::MPTFO& mp) { std::ostringstream os; os << mp; return os.str(); })
        ;

{% for interface in interfaces %}
    pybind11::class_< mega::service::Ptr<{{ interface.full_type_name }}> >( pythonModule, "{{ interface.type_name }}" )
            .def( "__repr__", [](mega::service::Ptr<{{ interface.full_type_name }}> p)
            {
                std::ostringstream os;
                os << " MPTFO: " << p.str() << " Interface: " << "{{ interface.type_name }}";
                return os.str();
            })
            .def( "__str__", [](mega::service::Ptr<{{ interface.full_type_name }}> p)
            { 
                std::ostringstream os;
                os << " MPTFO: " << p.str() << " Interface: " << "{{ interface.type_name }}";
                return os.str();
            })
{% for function in interface.functions %}
            .def( "{{ function.name }}", []
            (
                mega::service::Ptr<{{ interface.full_type_name }}> p
{% for param in function.parameters %}
                ,{{ param.type }} {{ param.name }}
{% endfor %}
            ) -> {{ function.return_type }}
            {
                {% if function.return_type != "void" %}
                return
                {% endif %}
                p->{{ function.name }}
                (
{% for param in function.parameters %}
                    {{ param.name }}{% if not loop.is_last %},{% endif %}
{% endfor %}
                );
            } )
{% endfor %}
        ;
{% endfor %}

    pybind11::class_< mega::service::PythonConnection >( pythonModule, "Connection" )
        .def( pybind11::init< std::string, short >() )
        .def( pybind11::init( &mega::service::PythonConnection::createDefault ))
        .def( "mp", &mega::service::PythonConnection::getMP )
        .def( "daemon", &mega::service::PythonConnection::getDaemonMP )
        .def( "__repr__", &mega::service::PythonConnection::printRegistration )
        .def( "__str__", &mega::service::PythonConnection::printRegistration )
{% for interface in interfaces %}
        .def( "{{ interface.type_name }}", &mega::service::PythonConnection::get< {{ interface.full_type_name }} > )
{% endfor %}
        ;
}

