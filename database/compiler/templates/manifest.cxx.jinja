//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.




#include "database/manifest.hxx"
#include "database/serialisation.hpp"
#include "database/file_store.hpp"
#include "database/component_info.hpp"

#include "database/environment.hxx"
#include "database/file_info.hxx"

#include "common/assert_verify.hpp"

#include <boost/filesystem.hpp>
#include <boost/filesystem/operations.hpp>

#include <boost/archive/xml_iarchive.hpp>
#include <boost/archive/xml_oarchive.hpp>

#include <fstream>

namespace mega::io
{
    Manifest::Manifest() {}

    Manifest::Manifest( const ManifestData& manifestData )
        :   ManifestData( manifestData )
    {
        initialiseLookupTables();
    }
 
    Manifest::Manifest( const Environment& environment, const manifestFilePath& filepath ) 
    { 
        std::unique_ptr< std::istream > pIfStream =
            environment.read( filepath );
        boost::archive::xml_iarchive ia( *pIfStream );
        ia >> boost::serialization::make_nvp( "manifest", *this );
        initialiseLookupTables();
    }

    Manifest::Manifest( const Environment& environment, const boost::filesystem::path& srcDirectory,
                        const std::vector< io::ComponentInfo >& componentInfos )
    {
        ObjectInfo::FileID compilationFileID = 0;

        m_manifestFilePath = environment.project_manifest();

{% for source in sources %}
{% if source.type == "manifest" %}
{% for file in source.files %}
        {
            FileInfo compilationFileInfo( FileInfo::{{ file.stage }}_{{ file.name }}, 
                compilationFileID++, 
                environment.{{ file.stage }}_{{ file.name }}( m_manifestFilePath ),
                m_manifestFilePath );
            m_compilationFileInfos.push_back( compilationFileInfo );
        }
{% endfor %}
{% endif %}
{% endfor %}

{% if length( sources ) > 0 %}
        for ( const auto& componentInfo : componentInfos )
        {
            for ( const boost::filesystem::path& filePath : componentInfo.getSourceFiles() )
            {
{% for source in sources %}
{% if source.type != "manifest" %}
                if( filePath.extension() == ".{{ source.type }}" )
                {
                    {{ source.type }}FilePath sourceFilePath = boost::filesystem::relative( filePath, srcDirectory );
{% if source.type == "mega" %}
                    m_megaSourceFiles.push_back( sourceFilePath );
{% endif %}
{% if source.type == "cpp" %}
                    m_cppSourceFiles.push_back( sourceFilePath );
{% endif %}
{% if source.type == "py" %}
                    m_pySourceFiles.push_back( sourceFilePath );
{% endif %}
{% if source.type == "sch" %}
                    m_schematicSourceFiles.push_back( sourceFilePath );
{% endif %}
{% for file in source.files %}
                    {
                        FileInfo compilationFileInfo( FileInfo::{{ file.stage }}_{{ file.name }}, 
                            compilationFileID++, 
                            environment.{{ file.stage }}_{{ file.name }}( sourceFilePath ),
                            sourceFilePath );
                        m_compilationFileInfos.push_back( compilationFileInfo );
                    }
{% endfor %}
                }
{% else %}
                (void)filePath;
                (void)srcDirectory;
{% endif %}
{% endfor %}
            }
        }
{% endif %}
        initialiseLookupTables();
    }

    void Manifest::initialiseLookupTables()
    {
        m_fileTypeMap.clear();
        m_dependencies.clear();

        for( FileInfoVector::const_iterator i = m_compilationFileInfos.begin(),
            iEnd = m_compilationFileInfos.end(); i!=iEnd; ++i )
        {
            const FileInfo& fileInfo = *i;
            VERIFY_RTE( m_fileTypeMap.insert( std::make_pair( 
                std::make_pair( fileInfo.getFileType(), fileInfo.getObjectSourceFilePath() ), i ) ).second );
            m_dependencies.push_back( FileIDVector{} );
        }

        for( FileInfoVector::const_iterator i = m_compilationFileInfos.begin(),
            iEnd = m_compilationFileInfos.end(); i!=iEnd; ++i )
        {
            //m_dependencies
            const FileInfo& fileInfo = *i;
            switch( fileInfo.getFileType() )
            {
{% for stage in stages %}
{% for file in stage.files %}
            case FileInfo::{{ stage.name }}_{{ file.name }}:
                {
{% for dependency in file.dependencies %}
                    {
                        FileTypeMap::const_iterator iFind = m_fileTypeMap.find( 
                            std::make_pair( FileInfo::{{ dependency.stage }}_{{ dependency.name }}, fileInfo.getObjectSourceFilePath() ) );
                        VERIFY_RTE_MSG( iFind != m_fileTypeMap.end(), "Failed to locate compilation file of type: FileInfo::{{ dependency.stage }}_{{ dependency.name }} for source file: " <<
                             fileInfo.getObjectSourceFilePath().path().string() );
                        m_dependencies[ static_cast< std::size_t >( fileInfo.getFileID() ) ].push_back( iFind->second->getFileID() );
                    }
{% endfor %}
                }
                break;
{% endfor %}
{% endfor %}
            default:
                THROW_RTE( "Unknown file type" );
                break;
            }
        }

    }

    File::PtrCst Manifest::loadFile( const Environment& environment, mega::io::FileStore& fileStore, 
        const SourceFilePath& sourceFile, FileInfo::Stage stage, FileInfo::Type fileType ) const
    {
        switch( fileType )
        {
{% for stage in stages %}
{% for file in stage.files %}
            case FileInfo::{{ stage.name }}_{{ file.name }}:
                {
                    FileTypeMap::const_iterator iFind = m_fileTypeMap.find( 
                        std::make_pair( FileInfo::{{ stage.name }}_{{ file.name }}, sourceFile ) );
                    VERIFY_RTE_MSG( iFind != m_fileTypeMap.end(), 
                        "Failed to locate compilation file of type: FileInfo::{{ stage.name }}_{{ file.name }} for source file: " << sourceFile.path().string() );
                    return loadFile( environment, fileStore, stage, iFind->second->getFileID() );
                }
                break;
{% endfor %}
{% endfor %}
            default:
                THROW_RTE( "Error loading unknown file type for source file: " << sourceFile.path().string() );
                break;
        }
    }

    File::PtrCst Manifest::loadFileImpl( const Environment& environment, mega::io::FileStore& fileStore, FileInfo::Stage stage, 
            ObjectInfo::FileID fileID, std::vector< File::Ptr >& loadedFiles ) const
    {
        VERIFY_RTE_MSG( fileID != ObjectInfo::NO_FILE, "Invalid file ID passed to manifest" );

        {
            File::PtrCst pLoadedFile = fileStore.getLoadedReadOnly( fileID );
            if( pLoadedFile ) return pLoadedFile;
        }

        const FileInfo& fileInfo = m_compilationFileInfos[ static_cast< std::size_t >( fileID ) ];
        File::Ptr pLoadedFile = std::make_shared< File >( environment, fileInfo, stage, fileStore );
        pLoadedFile->load( *this );

        fileStore.loadedReadOnly( fileInfo.getFileID(), pLoadedFile );

        loadedFiles.push_back( pLoadedFile );

        for( ObjectInfo::FileID dependencyFileID : m_dependencies[ static_cast< std::size_t >( fileID ) ] )
        {
            if( m_compilationFileInfos[ static_cast< std::size_t >( dependencyFileID ) ].getStage() < stage )
            {
                loadFileImpl( environment, fileStore, stage, dependencyFileID, loadedFiles );
            }
        }

        return pLoadedFile;
    }


    File::PtrCst Manifest::loadFile( const Environment& environment, mega::io::FileStore& fileStore, 
        FileInfo::Stage stage, ObjectInfo::FileID fileID ) const
    {
        VERIFY_RTE_MSG( fileID != ObjectInfo::NO_FILE, "Invalid file ID passed to manifest" );
        
        std::vector< File::Ptr > loadedFiles;
        File::PtrCst pResult = loadFileImpl( environment, fileStore, stage, fileID, loadedFiles );
        for( File::Ptr pFile : loadedFiles )
        {
            pFile->load_post( *this );
        }
        return pResult;
    }

    void Manifest::loadAll( const Environment& environment, mega::io::FileStore& fileStore, FileInfo::Stage stage ) const
    {
        for( FileInfoVector::const_iterator i = m_compilationFileInfos.begin(),
            iEnd = m_compilationFileInfos.end(); i!=iEnd; ++i )
        {
            if( i->getStage() <= stage )
            {
                loadFile( environment, fileStore, stage, i->getFileID() );
            }
        }
    }

    File::Ptr Manifest::createFile( const Environment& environment, mega::io::FileStore& fileStore,
        const SourceFilePath& sourceFile, FileInfo::Stage stage, FileInfo::Type fileType ) const
    {
        FileTypeMap::const_iterator iFind = m_fileTypeMap.find( 
            std::make_pair( fileType, sourceFile ) );
        VERIFY_RTE_MSG( iFind != m_fileTypeMap.end(), 
            "Failed to locate compilation file of type: " << fileType << " for source file: " << sourceFile.path().string() );
        const FileInfo& fileInfo = *iFind->second;
        File::Ptr pFile = std::make_shared< File >( environment, fileInfo, stage, fileStore );
        fileStore.createdReadWrite( fileInfo.getFileID(), pFile );
        return pFile;
    }

    task::FileHash Manifest::save_temp( const Environment& environment, const manifestFilePath& manifestFilePath ) const
    {
        boost::filesystem::path tempFilePath;
        {
            std::unique_ptr< std::ostream > pOfStream =
                environment.write_temp( manifestFilePath, tempFilePath );
            boost::archive::xml_oarchive oa( *pOfStream );
            oa << boost::serialization::make_nvp( "manifest", *this );
        }
        return task::FileHash( tempFilePath );
    }

} // namespace mega

BOOST_CLASS_IMPLEMENTATION( ::mega::io::Manifest, object_serializable )
